from turtle import forward
import torch
import torch.nn as nn

class LeNet(nn.Module):
    def __init__(self):
        super(LeNet, self).__init__()
        self.C1 = nn.Conv2d(1, 16, 5, 1, 2)
        self.R1 = nn.ReLU()
        self.S2 = nn.MaxPool2d(2)
        self.C3 = nn.Conv2d(16, 32, 5, 1, 2)
        self.R2 = nn.ReLU()
        self.S4 = nn.MaxPool2d(2)
        self.C5 = nn.Conv2d(32, 64, 5, 1, 2)
        self.R3 = nn.ReLU()
        self.F6 = nn.Linear(1600, 200)
        self.F7 = nn.Linear(200, 100)
        self.F8 = nn.Linear(100, 50)
        self.F9 = nn.Linear(50, 20)
        self.F10 = nn.Linear(20, 5)
        self.OUT = nn.Linear(5, 1)
    def forward(self, x):
        #print(x.size())
        #x = x.transpose(0, 1)
        #print(x.size())
        x = self.C1(x)
        #print(x.size())
        x = self.R1(x)
        #print(x.size())
        x = self.S2(x)
        #print(x.size())
        x = self.C3(x)
        #print(x.size())
        x = self.R2(x)
        #print(x.size())
        x = self.S4(x)
        #print(x.size())
        x = self.C5(x)
        #print(x.size())
        x = self.R3(x)
        #print(x.size())
        x = x.reshape(x.size(0), -1)
        #print(x.size())
        #x = x.view(1, 1600)
        #x = x.view(1, 500)
        x = self.F6(x)
        x = self.F7(x)
        x = self.F8(x)
        x = self.F9(x)
        x = self.F10(x)
        x = self.OUT(x)
        return x

if __name__ == "__main__":
    model = LeNet()
    a = torch.randn(2, 1, 5, 100)
    print(a)
    b = model(a)
    print(model)
    print(b)